import { useMutation, gql, ApolloError } from '@apollo/client';
import { useState } from 'react';
import {
  GET_USER,
  GET_USERS,
  ADD_USER,
  REGISTER_USER,
  ADD_STAGE_STATUS,
} from '../graphql/queries';
import { getUtmForBitrix24 } from '../utils/utmUtils';

export const useSubmit = (formData: any) => {
  const [createUserMutation, { loading, error }] = useMutation(REGISTER_USER, {
    errorPolicy: 'all',
  });
  const [addStageStatusMutation] = useMutation(ADD_STAGE_STATUS);

  const [errorSubmit, setErrorSubmit] = useState('');

  const handleSubmit = async (formData: any) => {
    // Check if the required fields are present
    if (
      !formData.name ||
      !formData.email ||
      !formData.password
    ) {
      throw new Error('All fields are required');
    }

    try {
      // Call the GraphQL mutation to create a user
      const utmData = getUtmForBitrix24();
      console.log('üìä UTM –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', utmData);
      console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', { name: formData.name, email: formData.email });
      
      const submitDataReturn: any = await createUserMutation({
        variables: {
          name: formData?.name,
          email: formData?.email?.toLowerCase(),
          phone: formData?.phone,
          password: formData?.password,
          city: formData?.city,
          utmData: Object.keys(utmData).length > 0 ? utmData : undefined,
        },
      });

      const result = submitDataReturn?.data?.registerUser;
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', result);

      // –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ GraphQL —Ä–µ–∑–æ–ª–≤–µ—Ä–µ registerUser
      if (result && !result.error) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', result.user?.id);
        if (result.user?.bitrix24DealId) {
          console.log('‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24:', result.user.bitrix24DealId);
        } else {
          console.log('‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –ù–ï —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24');
        }
        console.log('üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', result.token ? '–î–∞' : '–ù–µ—Ç');
        console.log('üìß Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', result.user?.email);
      } else if (result?.error === 'true') {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', result?.message);
        throw new Error(result?.message || 'Registration failed');
      } else {
        console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
      }

      return result;

      // Handle the response data here
    } catch (error) {
      if (error instanceof ApolloError) {
        setErrorSubmit(error.message);
        console.log('‚ùå Apollo error:', error);
      } else {
        console.log('‚ùå General error:', error);
        setErrorSubmit((error as Error).message);
      }
      throw error;
    }
  };
  return { handleSubmit, loading, errorSubmit: error };
};

export default useSubmit;
