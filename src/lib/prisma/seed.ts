import tools from '../dump-data/toolsData';
import { prisma } from './prismaClient';
import users from '../dump-data/userData';
import { lessonsData, coursesData, stageData } from '../dump-data/lessonsData';

const main = async () => {
  console.log(`üå± –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–¥–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...`);
  
  // –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  await prisma.stageStatus.deleteMany({});
  await prisma.stageTimecode.deleteMany({});
  await prisma.stage.deleteMany({});
  await prisma.lesson.deleteMany({});
  await prisma.course.deleteMany({});
  await prisma.user.deleteMany({});
  await prisma.tool.deleteMany({});

  console.log(`üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ...`);

  // –°–∏–¥–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
  console.log(`üõ†Ô∏è –°–∏–¥–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã...`);
  for (const tool of tools) {
    await prisma.tool.upsert({
      where: { id: tool.id },
      create: tool,
      update: tool,
    });
  }
  console.log(`‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: ${tools.length}`);

  // –°–∏–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log(`üë• –°–∏–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`);
  for (const user of users) {
    await prisma.user.upsert({
      where: { id: user.id },
      create: {
        ...user,
        isPaid: user.isPaid || false,
        paymentDate: user.paymentDate || null,
        stripeSessionId: user.stripeSessionId || null,
        bitrix24ContactId: user.bitrix24ContactId || null,
        bitrix24DealId: user.bitrix24DealId || null,
        onboarded: user.onboarded || false,
      },
      update: {
        ...user,
        isPaid: user.isPaid || false,
        paymentDate: user.paymentDate || null,
        stripeSessionId: user.stripeSessionId || null,
        bitrix24ContactId: user.bitrix24ContactId || null,
        bitrix24DealId: user.bitrix24DealId || null,
        onboarded: user.onboarded || false,
      },
    });
  }
  console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã: ${users.length}`);

  // –°–∏–¥–∏–º –∫—É—Ä—Å—ã
  console.log(`üìö –°–∏–¥–∏–º –∫—É—Ä—Å—ã...`);
  for (const course of Object.values(coursesData)) {
    await prisma.course.upsert({
      where: { id: course.id },
      create: course,
      update: course,
    });
  }
  console.log(`‚úÖ –ö—É—Ä—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: ${Object.keys(coursesData).length}`);

  // –°–∏–¥–∏–º —É—Ä–æ–∫–∏
  console.log(`üìñ –°–∏–¥–∏–º —É—Ä–æ–∫–∏...`);
  for (const lesson of Object.values(lessonsData)) {
    await prisma.lesson.upsert({
      where: { id: lesson.id },
      create: lesson,
      update: lesson,
    });
  }
  console.log(`‚úÖ –£—Ä–æ–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã: ${Object.keys(lessonsData).length}`);

  // –°–∏–¥–∏–º —ç—Ç–∞–ø—ã –∏ —Ç–∞–π–º–∫–æ–¥—ã
  console.log(`üéØ –°–∏–¥–∏–º —ç—Ç–∞–ø—ã –∏ —Ç–∞–π–º–∫–æ–¥—ã...`);
  for (const stage of stageData) {
    const { stageTimecodes, ...stageInfo } = stage;
    
    const createdStage = await prisma.stage.upsert({
      where: { id: stageInfo.id },
      create: stageInfo,
      update: stageInfo,
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∫–æ–¥—ã –¥–ª—è —ç—Ç–∞–ø–∞
    for (const timecode of stageTimecodes) {
      await prisma.stageTimecode.upsert({
        where: { id: timecode.id },
        create: {
          ...timecode,
          stageId: createdStage.id,
        },
        update: {
          ...timecode,
          stageId: createdStage.id,
        },
      });
    }
  }
  console.log(`‚úÖ –≠—Ç–∞–ø—ã –∏ —Ç–∞–π–º–∫–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: ${stageData.length} —ç—Ç–∞–ø–æ–≤`);

  console.log(`üéâ –°–∏–¥–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
};

main()
  .then(async () => {
    await prisma.$disconnect();
    console.log(`üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.`);
  })
  .catch(async (e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–¥–∏–Ω–≥–µ:', e);
    await prisma.$disconnect();
    process.exit(1);
  });
