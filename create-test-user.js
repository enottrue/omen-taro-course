const fetch = require('node-fetch');

async function createTestUser() {
  try {
    console.log('üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API...\n');

    // 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ GraphQL API
    console.log('1Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è test@gmail.com...');
    
    const registerQuery = `
      mutation RegisterUser($email: String!, $name: String!, $password: String!, $city: String, $phone: String) {
        registerUser(email: $email, name: $name, password: $password, city: $city, phone: $phone) {
          token
          user {
            id
            email
            name
            city
            phone
            isPaid
            onboarded
            bitrix24ContactId
            bitrix24DealId
          }
          message
          error
        }
      }
    `;

    const registerResponse = await fetch('http://localhost:3000/api/graphql', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        query: registerQuery,
        variables: {
          name: 'Test User',
          email: 'test@gmail.com',
          password: 'testpassword123',
          phone: '+7 (999) 123-45-67',
          city: '–ú–æ—Å–∫–≤–∞'
        }
      }),
    });

    const registerResult = await registerResponse.json();
    
    if (registerResult.data?.registerUser?.error === false) {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:');
      console.log(`   - ID: ${registerResult.data.registerUser.user.id}`);
      console.log(`   - Email: ${registerResult.data.registerUser.user.email}`);
      console.log(`   - –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: ${registerResult.data.registerUser.user.isPaid ? 'üí≥ –û–ø–ª–∞—á–µ–Ω' : 'üîí –ù–µ –æ–ø–ª–∞—á–µ–Ω'}`);
      console.log(`   - –û–Ω–±–æ—Ä–¥–∏–Ω–≥: ${registerResult.data.registerUser.user.onboarded ? '‚úÖ –ü—Ä–æ–π–¥–µ–Ω' : '‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω'}`);
    } else {
      console.log('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registerResult.data?.registerUser?.message);
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');
    
    const getUserQuery = `
      query GetUser($id: ID!) {
        getUser(id: $id) {
          id
          email
          name
          city
          phone
          isPaid
          onboarded
          bitrix24ContactId
          bitrix24DealId
        }
      }
    `;

    const userResponse = await fetch('http://localhost:3000/api/graphql', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        query: getUserQuery,
        variables: {
          id: '6' // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è test@gmail.com
        }
      }),
    });

    const userResult = await userResponse.json();
    
    if (userResult.data?.getUser) {
      console.log('‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:');
      console.log(`   - ID: ${userResult.data.getUser.id}`);
      console.log(`   - Email: ${userResult.data.getUser.email}`);
      console.log(`   - –ò–º—è: ${userResult.data.getUser.name}`);
      console.log(`   - –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: ${userResult.data.getUser.isPaid ? 'üí≥ –û–ø–ª–∞—á–µ–Ω' : 'üîí –ù–µ –æ–ø–ª–∞—á–µ–Ω'}`);
      console.log(`   - –û–Ω–±–æ—Ä–¥–∏–Ω–≥: ${userResult.data.getUser.onboarded ? '‚úÖ –ü—Ä–æ–π–¥–µ–Ω' : '‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω'}`);
    }

    // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ API
    console.log('\n3Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã...');
    
    const updateResponse = await fetch('http://localhost:3000/api/users/update-payment', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        userId: 6, // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è test@gmail.com
        isPaid: true
      }),
    });

    const updateResult = await updateResponse.json();
    
    if (updateResult.success) {
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω:');
      console.log(`   - ID: ${updateResult.user.id}`);
      console.log(`   - Email: ${updateResult.user.email}`);
      console.log(`   - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: ${updateResult.user.isPaid ? 'üí≥ –û–ø–ª–∞—á–µ–Ω' : 'üîí –ù–µ –æ–ø–ª–∞—á–µ–Ω'}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', updateResult.error);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:');
    console.log('   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://localhost:3000/payment-test');
    console.log('   - –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ test@gmail.com');
    console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ /courses, /course_book, /lesson/1/1');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

createTestUser(); 