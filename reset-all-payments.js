const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function resetAllPayments() {
  try {
    console.log('üîÑ –°–±—Ä–æ—Å –æ–ø–ª–∞—Ç—ã —É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –¥–ª—è –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const result = await prisma.user.updateMany({
      data: {
        isPaid: false,
        paymentDate: null,
        stripeSessionId: null,
      },
    });

    console.log(`‚úÖ –°–±—Ä–æ—à–µ–Ω —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –¥–ª—è ${result.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        isPaid: true,
        paymentDate: true,
        stripeSessionId: true,
      },
      orderBy: {
        id: 'asc',
      },
    });

    console.log('\nüìã –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    users.forEach(user => {
      console.log(`   - ID: ${user.id}, Email: ${user.email}, –û–ø–ª–∞—á–µ–Ω: ${user.isPaid ? '‚úÖ' : '‚ùå'}`);
    });

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const paidUsers = users.filter(u => u.isPaid === true);
    const unpaidUsers = users.filter(u => u.isPaid === false);

    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞:');
    console.log(`   - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);
    console.log(`   - –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: ${paidUsers.length}`);
    console.log(`   - –ù–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: ${unpaidUsers.length}`);

    if (paidUsers.length === 0) {
      console.log('\n‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ç–µ–ø–µ—Ä—å –Ω–µ –æ–ø–ª–∞—á–µ–Ω—ã');
    } else {
      console.log('\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—Å–µ –µ—â–µ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

resetAllPayments(); 