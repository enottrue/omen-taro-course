const fetch = require('node-fetch');

async function testRegistration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...\n');

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint /api/bitrix24/create-deal...');
    
    const testData = {
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      email: 'test.registration@example.com',
      phone: '+7 (999) 987-65-43',
      city: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      productId: '1777',
      comments: '–¢–µ—Å—Ç–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É',
      utmData: {
        UTM_SOURCE: 'test_registration',
        UTM_MEDIUM: 'form',
        UTM_CAMPAIGN: 'registration_test'
      }
    };

    const response = await fetch('http://localhost:3000/api/bitrix24/create-deal', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testData),
    });

    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24:');
      console.log(`   - ID —Å–¥–µ–ª–∫–∏: ${result.dealId}`);
      console.log(`   - ID –∫–æ–Ω—Ç–∞–∫—Ç–∞: ${result.contactId}`);
      console.log(`   - –ü—Ä–æ–¥—É–∫—Ç: ${result.productName}`);
      console.log(`   - –¶–µ–Ω–∞: $${result.productPrice}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:', result.error);
    }

    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GraphQL —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ GraphQL —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const graphqlQuery = `
      mutation RegisterUser($email: String!, $name: String!, $password: String!, $city: String, $phone: String) {
        registerUser(email: $email, name: $name, password: $password, city: $city, phone: $phone) {
          token
          user {
            id
            email
            name
            city
            phone
            bitrix24ContactId
            bitrix24DealId
          }
          message
          error
        }
      }
    `;

    const graphqlResponse = await fetch('http://localhost:3000/api/graphql', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        query: graphqlQuery,
        variables: {
          name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å GraphQL',
          email: 'test.graphql@example.com',
          password: 'testpassword123',
          phone: '+7 (999) 111-22-33',
          city: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'
        }
      }),
    });

    const graphqlResult = await graphqlResponse.json();
    
    if (graphqlResult.data?.registerUser?.error === false) {
      console.log('‚úÖ GraphQL —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:');
      console.log(`   - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${graphqlResult.data.registerUser.user.id}`);
      console.log(`   - Email: ${graphqlResult.data.registerUser.user.email}`);
      console.log(`   - ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24: ${graphqlResult.data.registerUser.user.bitrix24ContactId || '–ù–µ —Å–æ–∑–¥–∞–Ω'}`);
      console.log(`   - ID —Å–¥–µ–ª–∫–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å24: ${graphqlResult.data.registerUser.user.bitrix24DealId || '–ù–µ —Å–æ–∑–¥–∞–Ω–∞'}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ GraphQL —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', graphqlResult.data?.registerUser?.message);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('2. –ù–∞–∂–º–∏—Ç–µ "Sign In"');
    console.log('3. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
    console.log('4. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    console.log('5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testRegistration(); 