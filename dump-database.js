const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient();

async function dumpDatabase() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    // –î–∞–º–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.user.findMany();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}`);

    // –î–∞–º–ø –∫—É—Ä—Å–æ–≤
    const courses = await prisma.course.findMany();
    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ –∫—É—Ä—Å–æ–≤: ${courses.length}`);

    // –î–∞–º–ø —É—Ä–æ–∫–æ–≤
    const lessons = await prisma.lesson.findMany();
    console.log(`üìñ –ù–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: ${lessons.length}`);

    // –î–∞–º–ø —ç—Ç–∞–ø–æ–≤
    const stages = await prisma.stage.findMany({
      include: {
        stageTimecodes: true,
      },
    });
    console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ —ç—Ç–∞–ø–æ–≤: ${stages.length}`);

    // –î–∞–º–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    const tools = await prisma.tool.findMany();
    console.log(`üõ†Ô∏è –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: ${tools.length}`);

    // –î–∞–º–ø —Å—Ç–∞—Ç—É—Å–æ–≤ —ç—Ç–∞–ø–æ–≤
    const stageStatuses = await prisma.stageStatus.findMany();
    console.log(`üìà –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤ —ç—Ç–∞–ø–æ–≤: ${stageStatuses.length}`);

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏
    const databaseDump = {
      users,
      courses,
      lessons,
      stages,
      tools,
      stageStatuses,
      dumpDate: new Date().toISOString(),
      totalRecords: users.length + courses.length + lessons.length + stages.length + tools.length + stageStatuses.length,
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    const dumpPath = path.join(__dirname, 'database-dump.json');
    fs.writeFileSync(dumpPath, JSON.stringify(databaseDump, null, 2));
    
    console.log(`‚úÖ –î–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${dumpPath}`);
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${databaseDump.totalRecords}`);
    console.log(`üìÖ –î–∞—Ç–∞ –¥–∞–º–ø–∞: ${databaseDump.dumpDate}`);

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
    const dumpsDir = path.join(__dirname, 'dumps');
    if (!fs.existsSync(dumpsDir)) {
      fs.mkdirSync(dumpsDir);
    }

    fs.writeFileSync(
      path.join(dumpsDir, 'users-dump.json'),
      JSON.stringify(users, null, 2)
    );

    fs.writeFileSync(
      path.join(dumpsDir, 'courses-dump.json'),
      JSON.stringify(courses, null, 2)
    );

    fs.writeFileSync(
      path.join(dumpsDir, 'lessons-dump.json'),
      JSON.stringify(lessons, null, 2)
    );

    fs.writeFileSync(
      path.join(dumpsDir, 'stages-dump.json'),
      JSON.stringify(stages, null, 2)
    );

    fs.writeFileSync(
      path.join(dumpsDir, 'tools-dump.json'),
      JSON.stringify(tools, null, 2)
    );

    fs.writeFileSync(
      path.join(dumpsDir, 'stage-statuses-dump.json'),
      JSON.stringify(stageStatuses, null, 2)
    );

    console.log(`üìÅ –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: ${dumpsDir}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∞–º–ø–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

dumpDatabase(); 