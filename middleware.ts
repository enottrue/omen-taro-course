// middleware.ts
import { NextRequest, NextResponse } from 'next/server';
import cookie from 'cookie';
import jwt from 'jsonwebtoken';
//@ts-expect-error
import { jws } from 'jsrsasign';

// –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
const PAID_ONLY_PAGES = [
  '/courses',
  '/course_book',
  '/lesson',
  '/onboarding'
];

// –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
const PUBLIC_PAGES = [
  '/',
  '/payment/success',
  '/payment/cancel',
  '/reset-password',
  '/api'
];

export async function middleware(req: NextRequest) {
  const APP_SECRET = process.env.APP_SECRET;
  const cookies = req.headers.get('Cookie')
    ? cookie.parse(req.headers.get('Cookie')!)
    : {};

  req.cookies.getAll();
  const response = NextResponse.next();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É–±–ª–∏—á–Ω–æ–π
  const isPublicPage = PUBLIC_PAGES.some(page => req.nextUrl.pathname.startsWith(page));
  const isPaidOnlyPage = PAID_ONLY_PAGES.some(page => req.nextUrl.pathname.startsWith(page));

  if (cookies.Bearer) {
    try {
      const isValid = jws.JWS.verifyJWT(cookies.Bearer, APP_SECRET, {
        alg: ['HS256'],
      });
      
      if (!isValid) {
        response.cookies.delete('Bearer');
        response.cookies.delete('userId');
      } else {
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π –∏ –µ—Å—Ç—å userId, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
        if (cookies.userId) {
          try {
            // –°—Ç—Ä–æ–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL, –∏—Å–ø–æ–ª—å–∑—É—è HTTP –¥–ª—è localhost –∏ HTTPS –¥–ª—è production
            const host = req.headers.get('Host') || 'localhost:3000';
            const isLocalhost = host.includes('localhost') || host.includes('127.0.0.1');
            const protocol = isLocalhost ? 'http:' : 'https:';
            const apiUrl = `${protocol}//${host}/api/users/${cookies.userId}`;
            
            console.log('üîç Middleware: Fetching user data from:', apiUrl);
            console.log('üîç Middleware: User ID from cookie:', cookies.userId);
            
            const userResponse = await fetch(apiUrl, {
              headers: {
                'Cookie': req.headers.get('Cookie') || '',
              },
            });

            console.log('üîç Middleware: Response status:', userResponse.status);

            if (userResponse.ok) {
              const userData = await userResponse.json();
              
              console.log('üîç Middleware: Raw user data:', userData);
              console.log('üîç Middleware: User data:', {
                id: userData.user.id,
                email: userData.user.email,
                isPaid: userData.user.isPaid,
                updatedAt: userData.user.updatedAt,
                currentPath: req.nextUrl.pathname
              });
              
              // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ onboarding
              if (userData.user.isPaid && req.nextUrl.pathname === '/') {
                console.log('üîÑ Redirecting paid user from / to /onboarding');
                const url = req.nextUrl.clone();
                url.pathname = '/onboarding';
                return NextResponse.redirect(url, { status: 302 });
              }
              
              // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø–ª–∞—Ç–∏–ª –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
              if (!userData.user.isPaid && isPaidOnlyPage) {
                console.log('üîÑ Redirecting unpaid user from protected page to /');
                const url = req.nextUrl.clone();
                url.pathname = '/';
                return NextResponse.redirect(url, { status: 302 });
              }
            } else {
              console.error('‚ùå Middleware: Failed to fetch user data. Status:', userResponse.status);
              const errorText = await userResponse.text();
              console.error('‚ùå Middleware: Error response:', errorText);
            }
          } catch (error) {
            console.error('Error checking user payment status:', error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ –¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if (isPaidOnlyPage) {
              const url = req.nextUrl.clone();
              url.pathname = '/';
              return NextResponse.redirect(url, { status: 302 });
            }
          }
        }

        response.cookies.set('Bearer', cookies.Bearer, {
          maxAge: 180 * 24 * 60 * 60,
        });
        
        if (cookies.userId) {
          response.cookies.set('userId', cookies.userId, {
            maxAge: 180 * 24 * 60 * 60,
          });
        }
      }
    } catch (err) {
      //@ts-expect-error
      console.log('TOKEN error - injection attempt', err.message);
      response.cookies.delete('Bearer');
      response.cookies.delete('userId');
    }
  } else if (isPaidOnlyPage) {
    // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const url = req.nextUrl.clone();
    url.pathname = '/';
    return NextResponse.redirect(url, { status: 302 });
  }

  return response;
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     */
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
};
