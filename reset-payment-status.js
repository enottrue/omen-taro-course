const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function resetPaymentStatus() {
  try {
    console.log('üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const result = await prisma.user.updateMany({
      where: {
        isPaid: true,
      },
      data: {
        isPaid: false,
        paymentDate: null,
        stripeSessionId: null,
      },
    });

    console.log(`‚úÖ –°–±—Ä–æ—à–µ–Ω —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –¥–ª—è ${result.count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        isPaid: true,
        paymentDate: true,
        stripeSessionId: true,
      },
    });

    console.log('\nüìã –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    users.forEach(user => {
      console.log(`   - ID: ${user.id}, Email: ${user.email}, –û–ø–ª–∞—á–µ–Ω: ${user.isPaid ? '‚úÖ' : '‚ùå'}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

resetPaymentStatus(); 