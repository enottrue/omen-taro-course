const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function debugUsers() {
  try {
    console.log('üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');

    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const allUsers = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        isPaid: true,
        paymentDate: true,
        stripeSessionId: true,
        onboarded: true,
        createdAt: true,
        updatedAt: true,
      },
      orderBy: {
        id: 'asc',
      },
    });

    console.log(`üìã –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${allUsers.length}\n`);

    allUsers.forEach((user, index) => {
      console.log(`${index + 1}. üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${user.id}`);
      console.log(`   Email: ${user.email}`);
      console.log(`   –ò–º—è: ${user.name}`);
      console.log(`   isPaid: ${user.isPaid} ${user.isPaid ? '‚úÖ' : '‚ùå'}`);
      console.log(`   –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã: ${user.paymentDate || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      console.log(`   Stripe Session: ${user.stripeSessionId || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
      console.log(`   –û–Ω–±–æ—Ä–¥–∏–Ω–≥: ${user.onboarded ? '‚úÖ' : '‚ùå'}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${user.createdAt.toLocaleString()}`);
      console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω: ${user.updatedAt.toLocaleString()}`);
      console.log('');
    });

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const paidUsers = allUsers.filter(u => u.isPaid === true);
    const unpaidUsers = allUsers.filter(u => u.isPaid === false);

    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsers.length}`);
    console.log(`   - –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö (isPaid: true): ${paidUsers.length}`);
    console.log(`   - –ù–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö (isPaid: false): ${unpaidUsers.length}`);

    if (paidUsers.length > 0) {
      console.log('\nüí∞ –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
      paidUsers.forEach(user => {
        console.log(`   - ${user.email} (ID: ${user.id})`);
      });
    }

    if (unpaidUsers.length > 0) {
      console.log('\nüîí –ù–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
      unpaidUsers.forEach(user => {
        console.log(`   - ${user.email} (ID: ${user.id})`);
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugUsers(); 